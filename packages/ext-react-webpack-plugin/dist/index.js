'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

class ExtWebpackPlugin {
  constructor(options) {
    var o = p._constructor(options);

    this.vars = o.vars;
    this.options = o.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      p.logh(app, `HOOK thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      p.logh(app, `HOOK compilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      p.logh(app, `HOOK afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      p.logh(app, `HOOK emit (async)`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, stats => {
      p.logh(app, `HOOK done`);

      p._done(stats, vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvIiwiX2NvbnN0cnVjdG9yIiwidmFycyIsImFwcGx5IiwiY29tcGlsZXIiLCJhcHAiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsImxvZ2giLCJfdGhpc0NvbXBpbGF0aW9uIiwicGx1Z2luRXJyb3JzIiwibGVuZ3RoIiwiZXJyb3JzIiwicHVzaCIsIkVycm9yIiwiam9pbiIsIl9jb21waWxhdGlvbiIsImFmdGVyQ29tcGlsZSIsIl9hZnRlckNvbXBpbGUiLCJlbWl0IiwidGFwQXN5bmMiLCJjYWxsYmFjayIsIl9lbWl0IiwiZG9uZSIsInN0YXRzIiwiX2RvbmUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBQ0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFFLGNBQUYsQ0FBakI7O0FBRWUsTUFBTUUsZ0JBQU4sQ0FBdUI7QUFFcENDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFFBQUlDLENBQUMsR0FBR0osQ0FBQyxDQUFDSyxZQUFGLENBQWVGLE9BQWYsQ0FBUjs7QUFDQSxTQUFLRyxJQUFMLEdBQVlGLENBQUMsQ0FBQ0UsSUFBZDtBQUNBLFNBQUtILE9BQUwsR0FBZUMsQ0FBQyxDQUFDRCxPQUFqQjtBQUNEOztBQUVESSxFQUFBQSxLQUFLLENBQUNDLFFBQUQsRUFBVztBQUNkLFVBQU1GLElBQUksR0FBRyxLQUFLQSxJQUFsQjtBQUNBLFVBQU1ILE9BQU8sR0FBRyxLQUFLQSxPQUFyQjtBQUNBLFVBQU1NLEdBQUcsR0FBRyxLQUFLQSxHQUFqQjs7QUFFQSxRQUFJLENBQUNELFFBQVEsQ0FBQ0UsS0FBZCxFQUFxQjtBQUFDQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0FBQTZCO0FBQU87O0FBRTFESixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZUcsZUFBZixDQUErQkMsR0FBL0IsQ0FBb0Msc0JBQXBDLEVBQTREQyxXQUFELElBQWlCO0FBQzFFZixNQUFBQSxDQUFDLENBQUNnQixJQUFGLENBQU9QLEdBQVAsRUFBYSxzQkFBYjs7QUFDQVQsTUFBQUEsQ0FBQyxDQUFDaUIsZ0JBQUYsQ0FBbUJULFFBQW5CLEVBQTZCTyxXQUE3QixFQUEwQ1QsSUFBMUMsRUFBZ0RILE9BQWhEOztBQUNBLFVBQUlHLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkMsTUFBbEIsR0FBMkIsQ0FBL0IsRUFBa0M7QUFDaENKLFFBQUFBLFdBQVcsQ0FBQ0ssTUFBWixDQUFtQkMsSUFBbkIsQ0FBeUIsSUFBSUMsS0FBSixDQUFVaEIsSUFBSSxDQUFDWSxZQUFMLENBQWtCSyxJQUFsQixDQUF1QixFQUF2QixDQUFWLENBQXpCO0FBQ0E7QUFDRDtBQUNGLEtBUEQ7QUFTQWYsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVLLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRWYsTUFBQUEsQ0FBQyxDQUFDZ0IsSUFBRixDQUFPUCxHQUFQLEVBQWEsa0JBQWI7O0FBQ0FULE1BQUFBLENBQUMsQ0FBQ3dCLFlBQUYsQ0FBZWhCLFFBQWYsRUFBeUJPLFdBQXpCLEVBQXNDVCxJQUF0QyxFQUE0Q0gsT0FBNUM7QUFDRCxLQUhEO0FBS0FLLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlZSxZQUFmLENBQTRCWCxHQUE1QixDQUFnQyxtQkFBaEMsRUFBc0RDLFdBQUQsSUFBaUI7QUFDcEVmLE1BQUFBLENBQUMsQ0FBQ2dCLElBQUYsQ0FBT1AsR0FBUCxFQUFhLG1CQUFiOztBQUNBVCxNQUFBQSxDQUFDLENBQUMwQixhQUFGLENBQWdCbEIsUUFBaEIsRUFBMEJPLFdBQTFCLEVBQXVDVCxJQUF2QyxFQUE2Q0gsT0FBN0M7QUFDRCxLQUhEO0FBS0FLLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlaUIsSUFBZixDQUFvQkMsUUFBcEIsQ0FBOEIsVUFBOUIsRUFBeUMsQ0FBQ2IsV0FBRCxFQUFjYyxRQUFkLEtBQTJCO0FBQ2xFN0IsTUFBQUEsQ0FBQyxDQUFDZ0IsSUFBRixDQUFPUCxHQUFQLEVBQWEsbUJBQWI7O0FBQ0FULE1BQUFBLENBQUMsQ0FBQzhCLEtBQUYsQ0FBUXRCLFFBQVIsRUFBa0JPLFdBQWxCLEVBQStCVCxJQUEvQixFQUFxQ0gsT0FBckMsRUFBOEMwQixRQUE5QztBQUNELEtBSEQ7QUFLQXJCLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlcUIsSUFBZixDQUFvQmpCLEdBQXBCLENBQXlCLFVBQXpCLEVBQXFDa0IsS0FBRCxJQUFXO0FBQzdDaEMsTUFBQUEsQ0FBQyxDQUFDZ0IsSUFBRixDQUFPUCxHQUFQLEVBQWEsV0FBYjs7QUFDQVQsTUFBQUEsQ0FBQyxDQUFDaUMsS0FBRixDQUFRRCxLQUFSLEVBQWUxQixJQUFmLEVBQXFCSCxPQUFyQjtBQUNELEtBSEQ7QUFJRDs7QUEzQ21DIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKVxuY29uc3QgcCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dFdlYnBhY2tQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgbyA9IHAuX2NvbnN0cnVjdG9yKG9wdGlvbnMpXG4gICAgdGhpcy52YXJzID0gby52YXJzXG4gICAgdGhpcy5vcHRpb25zID0gby5vcHRpb25zXG4gIH1cblxuICBhcHBseShjb21waWxlcikge1xuICAgIGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHBcblxuICAgIGlmICghY29tcGlsZXIuaG9va3MpIHtjb25zb2xlLmxvZygnbm90IHdlYnBhY2sgNCcpO3JldHVybn1cblxuICAgIGNvbXBpbGVyLmhvb2tzLnRoaXNDb21waWxhdGlvbi50YXAoYGV4dC10aGlzLWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwLmxvZ2goYXBwLCBgSE9PSyB0aGlzQ29tcGlsYXRpb25gKVxuICAgICAgcC5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICAgIGlmICh2YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCBuZXcgRXJyb3IodmFycy5wbHVnaW5FcnJvcnMuam9pbihcIlwiKSkgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHAubG9naChhcHAsIGBIT09LIGNvbXBpbGF0aW9uYClcbiAgICAgIHAuX2NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuYWZ0ZXJDb21waWxlLnRhcCgnZXh0LWFmdGVyLWNvbXBpbGUnLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHAubG9naChhcHAsIGBIT09LIGFmdGVyQ29tcGlsZWApXG4gICAgICBwLl9hZnRlckNvbXBpbGUoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5lbWl0LnRhcEFzeW5jKGBleHQtZW1pdGAsIChjb21waWxhdGlvbiwgY2FsbGJhY2spID0+IHtcbiAgICAgIHAubG9naChhcHAsIGBIT09LIGVtaXQgKGFzeW5jKWApXG4gICAgICBwLl9lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsIChzdGF0cykgPT4ge1xuICAgICAgcC5sb2doKGFwcCwgYEhPT0sgZG9uZWApXG4gICAgICBwLl9kb25lKHN0YXRzLCB2YXJzLCBvcHRpb25zKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==