/**
 * Describes a gauge needle as a shape defined in SVG path syntax.
 *
 * Note: this class and its subclasses are not supposed to be instantiated directly
 * - an object should be passed the gauge's {@link Ext.ux.gauge.Gauge#needle}
 * config instead. Needle instances are also not supposed to be moved
 * between gauges.
 */

/**
 * The generator function for the needle's shape.
 * Because the gauge component is resizable, and it is generally
 * desirable to resize the needle along with the gauge, the needle's
 * shape should have an ability to grow, typically non-uniformly,
 * which necessitates a generator function that will update the needle's
 * path, so that its proportions are appropriate for the current gauge size.
 *
 * The generator function is given two parameters: the inner and outer
 * radius of the needle. For example, for a straight arrow, the path
 * definition is expected to have the base of the needle at the origin
 * - (0, 0) coordinates - and point downwards. The needle will be automatically
 * translated to the center of the gauge and rotated to represent the current
 * gauge {@link Ext.ux.gauge.Gauge#value value}.
 *
 * @param {Function} path The path generator function.
 * @param {Number} path.innerRadius The function's first parameter.
 * @param {Number} path.outerRadius The function's second parameter.
 * @return {String} path.return The shape of the needle in the SVG path syntax returned by
 * the generator function.
 */

/**
 * The inner radius of the needle. This works just like the `innerRadius`
 * config of the {@link Ext.ux.gauge.Gauge#trackStyle}.
 * The default value is `25` to make sure the needle doesn't overlap with
 * the value of the gauge shown at its center by default.
 *
 * @param {Number/String} [innerRadius=25]
 */

/**
 * The outer radius of the needle. This works just like the `outerRadius`
 * config of the {@link Ext.ux.gauge.Gauge#trackStyle}.
 *
 * @param {Number/String} [outerRadius='100% - 20']
 */

/**
 * The shape generated by the {@link #path} function is used as the value
 * for the `d` attribute of the SVG `<path>` element. This element
 * has the default class name of `.x-gauge-needle`, so that CSS can be used
 * to give all gauge needles some common styling. To style a particular needle,
 * one can use this config to add styles to the needle's `<path>` element directly,
 * or use a custom {@link Ext.ux.gauge.Gauge#cls class} for the needle's gauge
 * and style the needle from there.
 *
 * This config is not supposed to be updated manually, the styles should
 * always be updated by the means of the `setStyle` call. For example,
 * this is not allowed:
 *
 *     gauge.getStyle().fill = 'red';      // WRONG!
 *     gauge.setStyle({ 'fill': 'red' });  // correct
 *
 * Subsequent calls to the `setStyle` will add to the styles set previously
 * or overwrite their values, but won't remove them. If you'd like to style
 * from a clean slate, setting the style to `null` first will remove the styles
 * previously set:
 *
 *     gauge.getNeedle().setStyle(null);
 *
 * If an SVG shape was produced by a designer rather than programmatically,
 * in other words, the {@link #path} function returns the same shape regardless
 * of the parameters it was given, the uniform scaling of said shape is the only
 * option, if one wants to use gauges of different sizes. In this case,
 * it's possible to specify the desired scale by using the `transform` style,
 * for example:
 *
 *     transform: 'scale(0.35)'
 *
 * @param {Object} style
 */

/**
 * @private
 * @param {Number} radius
 */

/**
 * @private
 * Expected in the initial config, required during construction.
 * @param {Ext.ux.gauge.Gauge} gauge
 */

/**
 * @since 6.6.0
 *
 * Example usage:
 *
 *      @example
 *      import React, { Component } from 'react';
 *      import { ExtReact, SliderField, Gauge, FormPanel, Container} from '@sencha/ext-react-modern';
 *      Ext.require('Ext.ux.gauge.needle.Diamond');
 *      Ext.require('Ext.ux.gauge.needle.Arrow');
 *      export default class NeedleExample extends Component {
 *          constructor() {
 *              super();
 *              this.state = {
 *                  value: 30
 *              }
 *          }
 *          updateGauges(slider, value) {
 *              this.setState({ value })
 *          }
 *          render() {
 *              const { value } = this.state;
 *              return (
 *                  <ExtReact>
 *                      <FormPanel shadow layout="vbox" width={850}>
 *                          <SliderField label="Value" width={350} onChange={this.updateGauges.bind(this)} value={value}/>
 *                          <Container
 *                              layout={{
 *                                  type: 'hbox',
 *                                  align: 'stretch'
 *                              }}
 *                              margin={'10 0 10 0'} flex={1}
 *                              width={'100%'}
 *                              minHeight={200}
 *                          >
 *                              <Gauge flex={1} value={value}
 *                                  needle={{
 *                                      outerRadius: '100%'
 *                                  }}
 *                                  valueStyle={{
 *                                      display: 'none'
 *                                  }}
 *                              />
 *                          </Container>
 *                      </FormPanel>
 *                  </ExtReact>
 *              )
 *          }
 *      }
 */